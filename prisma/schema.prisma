/*
  삭제할 때는 수동외엔 방법이 없음
  npx wrangler d1 execute destiny --remote --command "DROP TABLE IF EXISTS comments;"
  추가할 떄는 npm run db:migrate:remote
*/
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/// 사용자 테이블 - Google OAuth로 로그인한 사용자 정보 저장
/// Google 계정과 연동된 사용자 관리 시스템
model User {
  id        Int      @id @default(autoincrement()) /// 사용자 고유 ID (자동 증가)
  googleId  String   @unique @map("google_id") /// Google 계정 고유 ID (Google에서 제공)
  email     String   @unique /// 사용자 이메일 주소 (Google 계정 이메일)
  name      String /// 사용자 이름 (Google 계정 이름)
  userName  String? /// 사용자 프로필 이름 (선택사항)
  picture   String? /// 사용자 프로필 사진 URL (Google 계정 프로필 사진, 선택사항)
  role      String   @default("user") /// 사용자 역할 (user, admin)
  createdAt DateTime @default(now()) @map("created_at") /// 계정 생성 시간
  updatedAt DateTime @updatedAt @map("updated_at") /// 계정 정보 마지막 업데이트 시간
  sessions Session[] /// 관계: 한 사용자는 여러 세션을 가질 수 있음
  sajuProfiles SajuProfile[] /// 관계: 한 사용자는 여러 사주 프로필을 가질 수 있음
  celebrityComments CelebrityComment[] /// 관계: 한 사용자는 여러 유명인물 댓글을 작성할 수 있음
  @@map("users")
}

/// 세션 테이블 - JWT 토큰 기반 사용자 세션 관리
/// 사용자 로그인 상태와 토큰 유효성을 관리
model Session {
  id        Int      @id @default(autoincrement()) /// 세션 고유 ID (자동 증가)
  userId    Int      @map("user_id") /// 세션 소유자의 사용자 ID
  jwtToken  String   @unique @map("jwt_token") /// JWT 토큰 문자열 (고유해야 함)
  expiresAt DateTime @map("expires_at") /// 토큰 만료 시간
  createdAt DateTime @default(now()) @map("created_at") /// 세션 생성 시간
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) /// 관계: 세션은 하나의 사용자에 속함 (사용자 삭제 시 세션도 삭제)
  @@map("sessions")
}

/// 사주 프로필 테이블 - 사용자별 사주 정보 저장
/// 한 사용자는 여러 개의 사주 프로필을 가질 수 있음 (가족, 친구 등)
model SajuProfile {
  id        Int      @id @default(autoincrement()) /// 사주 프로필 고유 ID (자동 증가)
  userId    Int      @map("user_id") /// 프로필 소유자의 사용자 ID (User 테이블과 연결)
  name      String /// 이름
  year      String /// 출생년도 (4자리)
  month     String /// 출생월 (2자리)
  day       String /// 출생일 (2자리)
  hour      String /// 출생시간 (24시간 형식, 2자리)
  minute    String /// 출생분 (2자리)
  calendar  String /// 달력 종류 (양력/음력)
  gender    String /// 성별 (남자/여자)
  createdAt DateTime @default(now()) @map("created_at") /// 프로필 생성 시간
  updatedAt DateTime @updatedAt @map("updated_at") /// 프로필 마지막 업데이트 시간
  /// 관계: 사주 프로필은 하나의 사용자에 속함 (사용자 삭제 시 프로필도 삭제)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("saju_profiles")
}

/// 유명인물 조회수 테이블 - 유명인물별 조회수만 관리
/// 유명인물 데이터는 프론트엔드에서 정적으로 관리
model CelebrityViewCount {
  celebrityId String   @id @map("celebrity_id") /// 유명인물 고유 ID (문자열, 예: "lee-seung-man")
  viewCount   Int      @default(0) @map("view_count") /// 조회수
  createdAt   DateTime @default(now()) @map("created_at") /// 생성 시간
  updatedAt   DateTime @updatedAt @map("updated_at") /// 마지막 업데이트 시간
  @@map("celebrity_view_counts")
}

/// 유명인물 댓글 테이블 - 유명인물 프로필에 대한 댓글
/// 대댓글 기능을 지원하는 계층형 댓글 시스템
model CelebrityComment {
  id            Int       @id @default(autoincrement()) /// 댓글 고유 ID (자동 증가)
  celebrityId   String    @map("celebrity_id") /// 댓글이 달린 유명인물 ID
  userId        Int       @map("user_id") /// 댓글 작성자 ID
  content       String /// 댓글 내용
  parentId      Int?      @map("parent_id") /// 부모 댓글 ID (대댓글의 경우, null이면 최상위 댓글)
  createdAt     DateTime  @default(now()) @map("created_at") /// 댓글 생성 시간
  updatedAt     DateTime  @updatedAt @map("updated_at") /// 댓글 마지막 업데이트 시간
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade) /// 관계: 댓글은 하나의 사용자에 속함
  parent        CelebrityComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade) /// 관계: 부모 댓글 (대댓글의 경우)
  replies       CelebrityComment[] @relation("CommentReplies") /// 관계: 자식 댓글들 (대댓글들)

  @@map("celebrity_comments")
}

/// 유명인물 요청 테이블 - 사용자가 요청한 유명인물 정보 저장
/// 새로운 유명인물 추가 요청을 관리하는 테이블
model CelebrityRequest {
  id          Int      @id @default(autoincrement()) /// 요청 고유 ID (자동 증가)
  name        String /// 유명인물 이름
  description String /// 유명인물 설명
  birthDate   String   @map("birth_date") /// 생년월일 (YYYY-MM-DD 형식)
  occupation  String /// 직업
  createdAt   DateTime @default(now()) @map("created_at") /// 요청 생성 시간
  updatedAt   DateTime @updatedAt @map("updated_at") /// 요청 마지막 업데이트 시간
  @@map("celebrity_requests")
} 